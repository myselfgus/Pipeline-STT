#!/bin/bash

# STT Pipeline - Azure Deployment Script usando Azure Developer CLI (azd)
# Este script usa as pr√°ticas mais modernas do Azure com AI Foundry

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ STT Pipeline - Modern Azure Deployment${NC}"
echo "================================================"
echo "Using Azure Developer CLI (azd) with latest Azure AI services"
echo ""

# Check prerequisites
echo -e "${YELLOW}üîç Checking prerequisites...${NC}"

# Check if azd is installed
if ! command -v azd &> /dev/null; then
    echo -e "${RED}‚ùå Azure Developer CLI (azd) not found${NC}"
    echo "Install with: curl -fsSL https://aka.ms/install-azd.sh | bash"
    exit 1
fi

# Check if az CLI is installed
if ! command -v az &> /dev/null; then
    echo -e "${RED}‚ùå Azure CLI (az) not found${NC}"
    echo "Install from: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli"
    exit 1
fi

echo -e "${GREEN}‚úÖ Prerequisites check passed${NC}"
echo ""

# Azure login and subscription setup
echo -e "${YELLOW}üîê Azure Authentication...${NC}"

# Check if already logged in
if ! az account show &> /dev/null; then
    echo "Please login to Azure..."
    az login
fi

# Show current subscription
CURRENT_SUB=$(az account show --query "name" -o tsv)
echo "Current subscription: $CURRENT_SUB"

# Set environment variables for azd
export AZURE_LOCATION="brazilsouth"
export AZURE_ENV_NAME="stt-prod"
export AZURE_PROJECT_NAME="stt-pipeline"

echo ""
echo -e "${YELLOW}üìã Deployment Configuration:${NC}"
echo "  Location: $AZURE_LOCATION"
echo "  Environment: $AZURE_ENV_NAME"
echo "  Project: $AZURE_PROJECT_NAME"
echo ""

# Confirm deployment
read -p "Continue with deployment? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Deployment cancelled"
    exit 0
fi

# Initialize azd environment
echo -e "${YELLOW}üîß Initializing azd environment...${NC}"
if [[ ! -f ".azure/$AZURE_ENV_NAME/.env" ]]; then
    azd env new $AZURE_ENV_NAME
    azd env set AZURE_LOCATION $AZURE_LOCATION
    azd env set AZURE_PROJECT_NAME $AZURE_PROJECT_NAME
else
    echo "Environment $AZURE_ENV_NAME already exists, using existing configuration"
fi

# Deploy infrastructure
echo ""
echo -e "${YELLOW}üèóÔ∏è  Deploying Azure infrastructure...${NC}"
echo "This will create:"
echo "  ‚Ä¢ Resource Group in Brazil South"
echo "  ‚Ä¢ Azure AI Hub (modern approach)"
echo "  ‚Ä¢ Azure OpenAI with Whisper & GPT-4 models"
echo "  ‚Ä¢ Azure AI Text Analytics"
echo "  ‚Ä¢ Key Vault for secure secret storage"
echo "  ‚Ä¢ Storage Account"
echo "  ‚Ä¢ Application Insights & Log Analytics"
echo ""

azd provision

# Get outputs from deployment
echo ""
echo -e "${YELLOW}üìä Retrieving deployment outputs...${NC}"

# Get the resource group name
RESOURCE_GROUP=$(azd env get-values | grep AZURE_RESOURCE_GROUP | cut -d'=' -f2 | tr -d '"')
echo "Resource Group: $RESOURCE_GROUP"

# Get service endpoints and keys
AZURE_OPENAI_ENDPOINT=$(azd env get-values | grep AZURE_OPENAI_ENDPOINT | cut -d'=' -f2 | tr -d '"')
AZURE_OPENAI_API_KEY=$(azd env get-values | grep AZURE_OPENAI_API_KEY | cut -d'=' -f2 | tr -d '"')
AZURE_AI_ENDPOINT=$(azd env get-values | grep AZURE_AI_ENDPOINT | cut -d'=' -f2 | tr -d '"')
AZURE_AI_API_KEY=$(azd env get-values | grep AZURE_AI_API_KEY | cut -d'=' -f2 | tr -d '"')
KEY_VAULT_NAME=$(azd env get-values | grep AZURE_KEY_VAULT_NAME | cut -d'=' -f2 | tr -d '"')

echo ""
echo -e "${GREEN}‚úÖ Azure resources deployed successfully!${NC}"
echo ""
echo -e "${BLUE}üìã Service Information:${NC}"
echo "========================================"
echo "üß† Azure OpenAI Service:"
echo "  Endpoint: $AZURE_OPENAI_ENDPOINT"
echo "  Models: whisper-1, gpt-4"
echo ""
echo "üî§ Azure AI Text Analytics:"
echo "  Endpoint: $AZURE_AI_ENDPOINT"
echo ""
echo "üîê Key Vault: $KEY_VAULT_NAME"
echo "  Location: https://portal.azure.com/#@/resource/subscriptions/$(az account show --query id -o tsv)/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.KeyVault/vaults/$KEY_VAULT_NAME"
echo ""

# Create .env file for local development
echo -e "${YELLOW}üìÑ Creating configuration files...${NC}"

cat > .env << EOF
# Azure STT Pipeline Configuration
# Generated by deploy-azure.sh on $(date)

# Azure Resource Information
AZURE_RESOURCE_GROUP=$RESOURCE_GROUP
AZURE_LOCATION=$AZURE_LOCATION
AZURE_KEY_VAULT_NAME=$KEY_VAULT_NAME

# Azure OpenAI Configuration
AZURE_OPENAI_ENDPOINT=$AZURE_OPENAI_ENDPOINT
AZURE_OPENAI_API_KEY=$AZURE_OPENAI_API_KEY
AZURE_OPENAI_API_VERSION=2024-10-21
WHISPER_MODEL=whisper-1
GPT_MODEL=gpt-4

# Azure AI Text Analytics Configuration
AZURE_AI_ENDPOINT=$AZURE_AI_ENDPOINT
AZURE_AI_API_KEY=$AZURE_AI_API_KEY
AZURE_AI_API_VERSION=2023-04-01

# Generated tokens (change these for production)
INTER_WORKER_TOKEN=$(openssl rand -hex 32)
CLIENT_API_KEY_1=$(openssl rand -hex 16)
CLIENT_API_KEY_2=$(openssl rand -hex 16)
CLIENT_API_KEY_3=$(openssl rand -hex 16)
ADMIN_API_KEY=$(openssl rand -hex 16)
VAD_WORKER_TOKEN=$(openssl rand -hex 16)
EOF

echo -e "${GREEN}‚úÖ Configuration saved to .env file${NC}"

# Update Cloudflare Worker secrets script
echo ""
echo -e "${YELLOW}üîß Updating Cloudflare Worker configuration...${NC}"

cat > set-worker-secrets.sh << 'EOF'
#!/bin/bash

# Load environment variables
source .env

echo "üîê Setting Cloudflare Worker secrets with Azure configuration..."

# Upload Processor
cd workers/upload-processor
wrangler secret put INTER_WORKER_TOKEN <<< "$INTER_WORKER_TOKEN"
wrangler secret put CLIENT_API_KEY_1 <<< "$CLIENT_API_KEY_1"
wrangler secret put CLIENT_API_KEY_2 <<< "$CLIENT_API_KEY_2"
wrangler secret put CLIENT_API_KEY_3 <<< "$CLIENT_API_KEY_3"
wrangler secret put VAD_WORKER_TOKEN <<< "$VAD_WORKER_TOKEN"
cd ../..

# Transcription Engine
cd workers/transcription-engine
wrangler secret put AZURE_OPENAI_API_KEY <<< "$AZURE_OPENAI_API_KEY"
wrangler secret put INTER_WORKER_TOKEN <<< "$INTER_WORKER_TOKEN"
cd ../..

# Assembly NER
cd workers/assembly-ner
wrangler secret put AZURE_AI_API_KEY <<< "$AZURE_AI_API_KEY"
wrangler secret put OPENAI_API_KEY <<< "$OPENAI_API_KEY"  # You need to set this manually
wrangler secret put INTER_WORKER_TOKEN <<< "$INTER_WORKER_TOKEN"
wrangler secret put ADMIN_API_KEY <<< "$ADMIN_API_KEY"
cd ../..

echo "‚úÖ Worker secrets configured!"
EOF

chmod +x set-worker-secrets.sh

# Test Azure services
echo ""
echo -e "${YELLOW}üß™ Testing Azure services...${NC}"

# Test OpenAI endpoint
echo -n "Testing Azure OpenAI connection... "
if curl -s -f -H "api-key: $AZURE_OPENAI_API_KEY" "$AZURE_OPENAI_ENDPOINT/openai/models?api-version=2024-10-21" > /dev/null; then
    echo -e "${GREEN}‚úÖ Connected${NC}"
else
    echo -e "${RED}‚ùå Failed${NC}"
fi

# Test Text Analytics
echo -n "Testing Azure AI Text Analytics... "
if curl -s -f -H "Ocp-Apim-Subscription-Key: $AZURE_AI_API_KEY" "$AZURE_AI_ENDPOINT/language/:analyze-text?api-version=2023-04-01" > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Connected${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Endpoint accessible (expected auth error)${NC}"
fi

echo ""
echo "================================================"
echo -e "${GREEN}üéâ Azure deployment completed successfully!${NC}"
echo ""
echo -e "${YELLOW}Next steps:${NC}"
echo "1. Set your OpenAI API key in .env file: OPENAI_API_KEY=your-key"
echo "2. Run: ./set-worker-secrets.sh"
echo "3. Deploy Cloudflare Workers: cd workers/[worker] && wrangler deploy"
echo "4. Test the pipeline: ./test-pipeline.sh"
echo ""
echo -e "${BLUE}üìö Resources created:${NC}"
echo "‚Ä¢ Azure AI Hub with latest capabilities"
echo "‚Ä¢ OpenAI Service with Whisper & GPT-4 models deployed"
echo "‚Ä¢ Text Analytics for medical NER"
echo "‚Ä¢ Secure Key Vault for secrets management"
echo "‚Ä¢ All configured for Brazil South (LGPD compliance)"
echo ""
echo -e "${YELLOW}üí° Monitor your deployment:${NC}"
echo "Portal: https://portal.azure.com/#@/resource/subscriptions/$(az account show --query id -o tsv)/resourceGroups/$RESOURCE_GROUP"
EOF