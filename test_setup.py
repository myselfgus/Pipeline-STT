#!/usr/bin/env python3
"""
Script de teste para verificar se todas as depend√™ncias est√£o instaladas corretamente
para o Pipeline STT
"""

import sys
import importlib
import torch
import warnings

# Suprimir warnings desnecess√°rios
warnings.filterwarnings("ignore")

def test_import(module_name, description=""):
    """Testa se um m√≥dulo pode ser importado"""
    try:
        importlib.import_module(module_name)
        print(f"‚úÖ {module_name} - {description}")
        return True
    except ImportError as e:
        print(f"‚ùå {module_name} - {description} - Error: {e}")
        return False

def test_models():
    """Testa se os modelos podem ser carregados"""
    print("\nüîç Testando modelos...")
    
    # Teste do spaCy
    try:
        import spacy
        nlp = spacy.load("pt_core_news_lg")
        print("‚úÖ spaCy - Modelo portugu√™s pt_core_news_lg carregado")
    except Exception as e:
        print(f"‚ùå spaCy - Erro ao carregar modelo portugu√™s: {e}")
    
    # Teste do Whisper (modelo pequeno para teste r√°pido)
    try:
        import whisper
        # Teste apenas se o modelo existe no cache
        import os
        whisper_cache = os.path.expanduser("~/.cache/whisper")
        if os.path.exists(whisper_cache):
            print("‚úÖ Whisper - Cache de modelos encontrado")
        else:
            print("‚ö†Ô∏è  Whisper - Cache n√£o encontrado, mas biblioteca funcional")
    except Exception as e:
        print(f"‚ùå Whisper - Erro: {e}")

def test_pytorch():
    """Testa PyTorch e disponibilidade de GPU"""
    print("\nüîç Testando PyTorch...")
    
    print(f"‚úÖ PyTorch vers√£o: {torch.__version__}")
    
    if torch.cuda.is_available():
        print(f"‚úÖ CUDA dispon√≠vel - Dispositivos: {torch.cuda.device_count()}")
        for i in range(torch.cuda.device_count()):
            print(f"  - GPU {i}: {torch.cuda.get_device_name(i)}")
    else:
        print("‚ö†Ô∏è  CUDA n√£o dispon√≠vel - Usando CPU")
    
    # Teste b√°sico de tensor
    try:
        x = torch.randn(3, 3)
        y = torch.randn(3, 3)
        z = torch.matmul(x, y)
        print("‚úÖ PyTorch - Opera√ß√µes b√°sicas funcionando")
    except Exception as e:
        print(f"‚ùå PyTorch - Erro em opera√ß√µes b√°sicas: {e}")

def main():
    """Fun√ß√£o principal de teste"""
    print("üöÄ Testando configura√ß√£o do Pipeline STT\n")
    
    # Lista de m√≥dulos essenciais para testar
    essential_modules = [
        ("torch", "PyTorch para computa√ß√£o tensorial"),
        ("torchaudio", "PyTorch Audio para processamento de √°udio"),
        ("whisper", "OpenAI Whisper para transcr,i√ß√£o"),
        ("spacy", "spaCy para processamento de linguagem natural"),
        ("librosa", "Librosa para an√°lise de √°udio"),
        ("soundfile", "SoundFile para I/O de arquivos de √°udio"),
        ("numpy", "NumPy para computa√ß√£o num√©rica"),
        ("scipy", "SciPy para computa√ß√£o cient√≠fica"),
        ("sklearn", "Scikit-learn para machine learning"),
        ("pandas", "Pandas para manipula√ß√£o de dados"),
    ]
    
    azure_modules = [
        ("azure.functions", "Azure Functions"),
        ("azure.storage.blob", "Azure Blob Storage"),
        ("azure.servicebus", "Azure Service Bus"),
    ]
    
    monitoring_modules = [
        ("opentelemetry", "OpenTelemetry para observabilidade"),
        ("structlog", "Structured logging"),
    ]
    
    web_modules = [
        ("fastapi", "FastAPI para APIs web"),
        ("pydantic", "Pydantic para valida√ß√£o de dados"),
    ]
    
    print("üì¶ Testando m√≥dulos essenciais:")
    essential_ok = all(test_import(module, desc) for module, desc in essential_modules)
    
    print("\n‚òÅÔ∏è  Testando m√≥dulos Azure:")
    azure_ok = all(test_import(module, desc) for module, desc in azure_modules)
    
    print("\nüìä Testando m√≥dulos de monitoramento:")
    monitoring_ok = all(test_import(module, desc) for module, desc in monitoring_modules)
    
    print("\nüåê Testando m√≥dulos web:")
    web_ok = all(test_import(module, desc) for module, desc in web_modules)
    
    # Testes espec√≠ficos
    test_pytorch()
    test_models()
    
    print("\n" + "="*60)
    print("üìã RESUMO DOS TESTES:")
    print(f"Essential modules: {'‚úÖ OK' if essential_ok else '‚ùå FALHOU'}")
    print(f"Azure modules: {'‚úÖ OK' if azure_ok else '‚ùå FALHOU'}")
    print(f"Monitoring modules: {'‚úÖ OK' if monitoring_ok else '‚ùå FALHOU'}")
    print(f"Web modules: {'‚úÖ OK' if web_ok else '‚ùå FALHOU'}")
    
    if essential_ok:
        print("\nüéâ Setup b√°sico conclu√≠do com sucesso!")
        print("Pr√≥ximos passos:")
        print("1. Configure as vari√°veis de ambiente do Azure")
        print("2. Execute os testes de integra√ß√£o")
        print("3. Deploy da infraestrutura")
    else:
        print("\n‚ö†Ô∏è  Alguns m√≥dulos essenciais falharam. Verifique a instala√ß√£o.")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())